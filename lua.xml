<?xml version="1.0" encoding="Windows-1252" ?>
<NotepadPlus>
    <Environment ignoreCase="no" startFunc="(" stopFunc=")" paramSeparator="," terminal=" " additionalWordChar = ".@#"/>
    <AutoComplete language="Blur lua">
		<!-- GUI Types -->
		<KeyWord name="GUI" func = "no"></KeyWord>
		<KeyWord name="RoundedGUI" func = "no"></KeyWord>
		<KeyWord name="WindowGUI" func = "no"></KeyWord>
		
        <!-- GUIObject Types -->
		<KeyWord name="Button" func = "no"></KeyWord>
		<KeyWord name="Label" func = "no"></KeyWord>
		<KeyWord name="CheckBox" func = "no"></KeyWord>
		<KeyWord name="Graph" func = "no"></KeyWord>
		<KeyWord name="ProgressBar" func = "no"></KeyWord>
		<KeyWord name="ScrollPanel" func = "no"></KeyWord>
		<KeyWord name="Slider" func = "no"></KeyWord>
		<KeyWord name="TextBox" func = "no"></KeyWord>
		<KeyWord name="Texture" func = "no"></KeyWord>
		<KeyWord name="TextureButton" func = "no"></KeyWord>
		<KeyWord name="TextView" func = "no"></KeyWord>

		<!-- Events -->
		<KeyWord name="render" func = "no"></KeyWord>
		<KeyWord name="postRender" func = "no"></KeyWord>
		<KeyWord name="mouseMove" func = "no"></KeyWord>
		<KeyWord name="mouseClick" func = "no"></KeyWord>
		<KeyWord name="mouseScroll" func = "no"></KeyWord>
		<KeyWord name="passiveInput" func = "no"></KeyWord>
		<KeyWord name="screenResize" func = "no"></KeyWord>
		<KeyWord name="playerCollision" func = "no"></KeyWord> <!-- DEPRECATED -->
		<KeyWord name="doPhysics" func = "no"></KeyWord>

		<KeyWord name="onCollision" func = "no"></KeyWord>
		<!-- Tile properties -->
		<KeyWord name="TextureMode" func = "no">
			<Overload retVal="TEXTUREMODE: textureMode">
            </Overload>
		</KeyWord>
		<KeyWord name="Static" func = "no">
			<Overload retVal="bool: static">
            </Overload>
		</KeyWord>
		<KeyWord name="CollisionsEnabled" func = "no">
			<Overload retVal="bool: enabled?">
            </Overload>
		</KeyWord>
        <KeyWord name="Color" func = "no">
			<Overload retVal="Color: color">
            </Overload>
		</KeyWord>
		<KeyWord name="Size" func = "no">
			<Overload retVal="Vector: size">
            </Overload>
		</KeyWord>
		<KeyWord name="Position" func = "no">
			<Overload retVal="Vector: position">
            </Overload>
		</KeyWord>
		<KeyWord name="Texture" func = "no">
			<Overload retVal="Texture: texture">
            </Overload>
		</KeyWord>
		<KeyWord name="Velocity" func = "no">
			<Overload retVal="Vector: velocity">
            </Overload>
		</KeyWord>
		<KeyWord name="VelocityFloor" func = "no">
			<Overload retVal="Vector: velocityFloor">
            </Overload>
		</KeyWord>
		<KeyWord name="VelocityCeiling" func = "no">
			<Overload retVal="Vector: velocityCeiling">
            </Overload>
		</KeyWord>
		<KeyWord name="Acceleration" func = "no">
			<Overload retVal="Vector: acceleration">
            </Overload>
		</KeyWord>
		<!-- Vector operations -->
		<KeyWord name="abs" func = "yes"></KeyWord>
		<KeyWord name="magnitude" func = "yes"></KeyWord>
		<KeyWord name="max" func = "yes"></KeyWord>
		<KeyWord name="min" func = "yes"></KeyWord>
		<KeyWord name="normalize" func = "yes"></KeyWord>
        <!-- GUI properties -->
        <KeyWord name="Alignment" func = "no"></KeyWord>
        <KeyWord name="BlurBackground" func = "no"></KeyWord>
        <KeyWord name="DraggerColor" func = "no"></KeyWord> <!-- WindowGUI -->
        <KeyWord name="MinSize" func = "no"></KeyWord>
        <KeyWord name="MaxSize" func = "no"></KeyWord>
        <KeyWord name="Opacity" func = "no"></KeyWord>
        <KeyWord name="Radius" func = "no"></KeyWord> <!-- RoundedGUI -->
        <KeyWord name="RoundBottomCorners" func = "no"></KeyWord> <!-- RoundedGUI -->
        <KeyWord name="RoundTopCorners" func = "no"></KeyWord> <!-- RoundedGUI -->
        <KeyWord name="Title" func = "no"></KeyWord> <!-- WindowGUI -->
        <KeyWord name="Visible" func = "no"></KeyWord>
		<!-- GUIObject properties -->
		<KeyWord name="AlignmentX" func = "no"></KeyWord>
		<KeyWord name="AlignmentY" func = "no"></KeyWord>
		<KeyWord name="BackgroundColor" func = "no"></KeyWord>
		<KeyWord name="CheckColor" func = "no"></KeyWord>
		<KeyWord name="CheckHighlightedColor" func = "no"></KeyWord>
		<KeyWord name="Color" func = "no"></KeyWord>
		<KeyWord name="HighlightedColor" func = "no"></KeyWord>
		<KeyWord name="PressedColor" func = "no"></KeyWord>
		<KeyWord name="TextureSize" func = "no"></KeyWord>
		<KeyWord name="Percentage" func = "no"></KeyWord>
		<KeyWord name="Text" func = "no"></KeyWord>
		<!-- Sound properties -->
		<KeyWord name="Loop" func = "no"></KeyWord>
		<KeyWord name="Pan" func = "no"></KeyWord>
		<KeyWord name="Pitch" func = "no"></KeyWord>
		<KeyWord name="Volume" func = "no"></KeyWord>
		
        <KeyWord name="accept" func = "yes">
			<Overload retVal = "Socket: acceptedConnection" descr="Socket method. Accept a connecting socket. Returns the socket or nil if there are none.">
			</Overload>
		</KeyWord>
		<KeyWord name="addObject" func = "yes"> <!-- DEPRECATED -->
			<Overload retVal = "void" descr="GUI method. Add a new object to be rendered inside a GUI">
				<Param name="GUIObject: object"/>
			</Overload>
		</KeyWord>
        <KeyWord name="and" func="no" />
        <KeyWord name="assert" func="yes">
            <Overload retVal="void" descr="
Issues an error when the value of its argument v is false (i.e., nil or false);
otherwise, returns all its arguments. message is an error message; when absent, it 
defaults to 'assertion failed!'">
                <Param name="bool:v" />
                <Param name="string:[message]" />
            </Overload>
        </KeyWord>
        <KeyWord name="available" func = "yes">
			<Overload retVal = "number: availableBytes" descr="Socket method. Gets the amount of bytes that can be read from a socket.">
			</Overload>
		</KeyWord>
        <KeyWord name="bind" func = "yes">
			<Overload retVal = "void" descr="Socket method. Bind the socket to the given IP address and port.">
				<Param name="string: IP"/>
                <Param name="number: port"/>
			</Overload>
		</KeyWord>
		<KeyWord name="BLF.findSaves" func = "yes">
			<Overload retVal="void">
            </Overload>
		</KeyWord>
		<KeyWord name="BLF.load" func = "yes">
			<Overload retVal="table">
				<Param name="string: path"/> 
            </Overload>
		</KeyWord>
		<KeyWord name="BLF.save" func = "yes">
			<Overload retVal="void">
				<Param name="string: path"/> 
				<Param name="Table: data"/>
            </Overload>
		</KeyWord>
		<KeyWord name="BLF.version" func = "yes">
			<Overload retVal="string: version">
            </Overload>
		</KeyWord>
        <KeyWord name="break" func="no" />
        <KeyWord name="Camera.getPosition" func = "yes">
			<Overload retVal="Vector: position">
            </Overload>
		</KeyWord>
		<KeyWord name="Camera.setPosition" func = "yes">
			<Overload retVal="void">
				<Param name="Vector: position"/> 
            </Overload>
		</KeyWord>
		<KeyWord name="Camera.track" func = "yes">
			<Overload retVal="void">
				<Param name="Tile: trackingTarget"/> 
            </Overload>
		</KeyWord>
        <KeyWord name="Console.setEnabled" func = "yes">
			<Overload retVal="void">
				<Param name="bool: newState"/> 
            </Overload>
		</KeyWord>
        <KeyWord name="close" func = "yes">
			<Overload retVal = "void" descr="Socket method. Closes the Socket.">
			</Overload>
		</KeyWord>
        <KeyWord name="connect" func = "yes">
			<Overload retVal = "number: error" descr="Socket method. Try to connect the Socket to the given IP address and port">
				<Param name="string: IP"/>
                <Param name="number: port"/>
			</Overload>
		</KeyWord>
        <KeyWord name="collectgarbage" func="yes">
            <Overload retVal="void" descr="This function is a generic interface to the garbage collector.
It performs different functions according to its first argument, opt:

    * 'stop': stops the garbage collector.
    * 'restart': restarts the garbage collector.
    * 'collect': performs a full garbage-collection cycle.
    * 'count': returns the total memory in use by Lua (in Kbytes).
    * 'step': performs a garbage-collection step. The step 'size' is controlled by arg
        (larger values mean more steps) in a non-specified way. If you want to control
        the step size you must experimentally tune the value of arg. Returns true if
        the step finished a collection cycle.
    * 'setpause': sets arg as the new value for the pause of the collector (see §2.10).
        Returns the previous value for pause.
    * 'setstepmul': sets arg as the new value for the step multiplier of the collector
        (see §2.10). Returns the previous value for step.
">
                <Param name="String:opt" />
                <Param name="[arg]" />
            </Overload>
        </KeyWord>
		<KeyWord name="Color.fromHSV" func = "yes">
			<Overload retVal="void">
				<Param name="number: H"/> 
				<Param name="number: S"/> 
				<Param name="number: V"/> 
            </Overload>
		</KeyWord>
		<KeyWord name="Color.fromRGB" func = "yes">
			<Overload retVal="void">
				<Param name="number: H"/> 
				<Param name="number: S"/> 
				<Param name="number: V"/> 
            </Overload>
		</KeyWord>
        <KeyWord name="coroutine.create" func="yes">
            <Overload retVal="void" descr="
Creates a new coroutine, with body f. f must be a Lua function. Returns this new
coroutine, an object with type 'thread'.
">
                <Param name="Function:f" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.resume" func="yes">
            <Overload retVal="void" descr="
Starts or continues the execution of coroutine co. The first time you resume a
coroutine, it starts running its body. The values val1, ··· are passed as the 
arguments to the body function. If the coroutine has yielded, resume restarts it; the 
values val1, ··· are passed as the results from the yield.

If the coroutine runs without any errors, resume returns true plus any values passed 
to yield (if the coroutine yields) or any values returned by the body function (if the
coroutine terminates). If there is any error, resume returns false plus the error 
message.
">
                <Param name="co" />
                <Param name="[, val, ...]" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.running" func="yes">
            <Overload retVal="void" descr="
Returns the running coroutine, or nil when called by the main thread. 
        "></Overload>
        </KeyWord>
        <KeyWord name="coroutine.status" func="yes">
            <Overload retVal="void" descr="
Returns the status of coroutine co, as a string: 'running', if the coroutine is running (that is, it called status); 
'suspended', if the coroutine is suspended in a call to yield, or if it has not started running yet; 
'normal' if the coroutine is active but not running (that is, it has resumed another coroutine); and 
'dead' if the coroutine has finished its body function, or if it has stopped with an error. 
        ">
                <Param name="co" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.wrap" func="yes">
            <Overload retVal="void" descr="
Creates a new coroutine, with body f. f must be a Lua function. Returns a function that resumes 
the coroutine each time it is called. Any arguments passed to the function behave as the extra 
arguments to resume. Returns the same values returned by resume, except the first boolean. In 
case of error, propagates the error. 
        ">
                <Param name="f" />
            </Overload>
        </KeyWord>
        <KeyWord name="coroutine.yield" func="yes">
            <Overload retVal="void" descr="
Suspends the execution of the calling coroutine. The coroutine cannot be running a C function, a 
metamethod, or an iterator. Any arguments to yield are passed as extra results to resume. 
        ">
                <Param name="..." />
            </Overload>
        </KeyWord>
		<KeyWord name="Debug.displayFramerate" func = "yes">
			<Overload retVal="void" descr="Enable or disable the framerate display, disabled by default">
				<Param name = "bool: displayFramerate"/>
            </Overload>
		</KeyWord>
		<KeyWord name="Debug.displayScreenLogs" func = "yes"> <!-- DEPRECATED REMOVED -->
			<Overload retVal="void" descr="Deprecated. Enable or disable the screen logs, disabled by default">
				<Param name = "bool: displayScreenLogs"/>
            </Overload>
		</KeyWord>
		<KeyWord name="Debug.displayTileInfo" func = "yes"> <!-- DEPRECATED REMOVED -->
			<Overload retVal="void" descr="Deprecated. Enable or disable info about hovered tiles, disabled by default">
				<Param name = "bool: displayTileInfo"/>
            </Overload>
		</KeyWord>
		<KeyWord name="delay" func = "yes">
			<Overload retVal="void" descr="Run the specified function in x seconds">
				<Param name = "number: delay"/>
				<Param name = "Function: delayedFunc"/>
            </Overload>
		</KeyWord>
		<KeyWord name="displayMessage" func = "yes"> <!-- DEPRECATED REMOVED -->
			<Overload retVal="void" descr = "Deprecated. Display the message on screen">
				<Param name = "string: message"/>
            </Overload>
		</KeyWord>
		<KeyWord name="displayMessageWithTime" func = "yes"> <!-- DEPRECATED REMOVED -->
			<Overload retVal="void" descr = "Deprecated. Display the message on screen in the specified amount of time">
				<Param name = "string: message, float: time"/>
            </Overload>
		</KeyWord>
		<KeyWord name="duplicate" func = "yes">
			<Overload retVal= "Tile: duplicate" descr = "Creates a copy of the tile">
            </Overload>
		</KeyWord>
        <KeyWord name="else" func="no" />
        <KeyWord name="elseif" func="no" />
        <KeyWord name="end" func="no" />
        <KeyWord name="endReached" func = "yes">
			<Overload retVal = "bool: endReached?" descr="Socket method. Returns true if the given Socket has reached end of stream (was closed).">
				<Param name="Socket: socket"/>
			</Overload>
		</KeyWord>
		<KeyWord name="event.call" func = "yes">
			<Overload retVal="void" descr = "Call an event">
            </Overload>
		</KeyWord>
		<KeyWord name="event.link" func = "yes">
			<Overload retVal="void" descr = "Add a new listener to an event">
				<Param name = "string: eventName"/>
				<Param name = "string: eventIdentifier"/>
				<Param name = "function: linkedFunction"/>
            </Overload>
		</KeyWord>
		<KeyWord name="event.register" func = "yes">
			<Overload retVal="void" descr = "Register / create a new event">
				<Param name = "string: eventName"/>
            </Overload>
		</KeyWord>
        <KeyWord name="false" func="no" />
		<KeyWord name="File.exists" func = "yes">
			<Overload retVal="bool" descr = "Determines whether a given path to a file exists on the filesystem">
                <Param name="string: path"/> 
            </Overload>
		</KeyWord>
        <KeyWord name="File.listDir" func = "yes" descr = "Recursively iterates over a given directory and returns the list of files contained within">
			<Overload retVal="array">
				<Param name="string: path"/> 
            </Overload>
		</KeyWord>
		<KeyWord name="File.load" func = "yes">
			<Overload retVal="string" descr = "Loads entire file as string (path relative to blur root)">
				<Param name="string: path"/> 
            </Overload>
		</KeyWord>
		<KeyWord name="File.save" func = "yes">
			<Overload retVal="void" descr = "Saves string as file (path relative to blur root)">
				<Param name="string: path"/> 
				<Param name="string: contents"/>
            </Overload>
		</KeyWord>
        <KeyWord name="Font.load" func = "yes">
			<Overload retVal="Font: loadedFont">
				<Param name="string: path"/>
				<Param name="number: size"/>
            </Overload>
		</KeyWord>
        <KeyWord name="for" func="no" />
        <KeyWord name="function" func="no" />
        <KeyWord name="getfenv" func="yes">
            <Overload retVal="void" descr="
Returns the current environment in use by the function. f can be a Lua function or a number that specifies 
the function at that stack level: Level 1 is the function calling getfenv. If the given function is not a 
Lua function, or if f is 0, getfenv returns the global environment. The default for f is 1. 
        ">
                <Param name="[f]" />
            </Overload>
        </KeyWord>
        <KeyWord name="getmetatable" func="yes">
            <Overload retVal="void" descr="
If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a '__metatable' 
field, returns the associated value. Otherwise, returns the metatable of the given object. 
        ">
                <Param name="object" />
            </Overload>
        </KeyWord>
		<KeyWord name="getBuildNumber" func = "yes">
			<Overload retVal="int: build">
            </Overload>
		</KeyWord>
		<KeyWord name="getDeltaTime" func = "yes">
			<Overload retVal="float: delta time" descr = "Get the amount of time that has passed since the previous frame was rendered">
            </Overload>
		</KeyWord>
		<KeyWord name="getVersionString" func = "yes">
			<Overload retVal="string: version">
            </Overload>
		</KeyWord>
		<KeyWord name="GUI.new" func = "yes">
			<Overload retVal="GUI createdGUI" descr = "Create a new gui, types are: WindowGUI, RoundedGUI">
				<Param name = "string: guiType"/>
            </Overload>
		</KeyWord>
		<KeyWord name="GUI.newObject" func = "yes">
			<Overload retVal="GUIObject createdObject" descr = "Create a new gui object, types are: Label, Button, Texture, Checkbox, Textbox, Slider, Graph">
				<Param name = "string: objectType"/>
            </Overload>
		</KeyWord>
		<KeyWord name="GUI.register" func = "yes"> <!-- DEPRECATED REMOVED -->
			<Overload retVal="void" descr = "Register the GUI to be rendered">
				<Param name = "GUI: guiToRegister"/>
            </Overload>
		</KeyWord>
		<KeyWord name="GUI.unregister" func = "yes"> <!-- DEPRECATED REMOVED -->
			<Overload retVal="void" descr = "Remove a GUI">
				<Param name = "GUI: guiToUnregister"/>
            </Overload>
		</KeyWord>
        <KeyWord name="if" func="no" />
        <KeyWord name="in" func="no" />
		<KeyWord name="include" func="yes">
			<Overload retVal="Script: loaded script">
				<Param name = "string: path"/>
            </Overload>
		</KeyWord>
        <KeyWord name="ipairs" func="yes">
            <Overload retVal="void" descr="
Returns three values: an iterator function, the table t, and 0, so that the construction

     for i,v in ipairs(t) do body end

will iterate over the pairs (1,t[1]), (2,t[2]), ···, up to the first integer key absent from the table. 
        ">
                <Param name="t" />
            </Overload>
        </KeyWord>
        <KeyWord name="listen" func = "yes">
			<Overload retVal = "void" descr="Socket method. Sets the length of the accept queue.">
				<Param name="number: length"/>
			</Overload>
		</KeyWord>
        <KeyWord name="local" func="no" />
        <KeyWord name="log" func ="yes">
            <Overload retVal="void" descr="Same as print, offers more granular control when outputting to the console.">
                <Param name = "string: name"/>
                <Param name = "string: content"/>
                <Param name = "LogSeverity: severity"/>
            </Overload>
        </KeyWord>
        <KeyWord name="math.abs" func="yes">
            <Overload retVal="void" descr="
Returns the absolute value of x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.acos" func="yes">
            <Overload retVal="void" descr="
Returns the arc cosine of x (in radians). 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.asin" func="yes">
            <Overload retVal="void" descr="
Returns the arc sine of x (in radians). 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.atan" func="yes">
            <Overload retVal="void" descr="
Returns the arc tangent of x (in radians). 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.atan2" func="yes">
            <Overload retVal="void" descr="
Returns the arc tangent of y/x (in radians), but uses the signs of both parameters to 
find the quadrant of the result. (It also handles correctly the case of x being zero.) 
        ">
                <Param name="y" />
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.ceil" func="yes">
            <Overload retVal="void" descr="
Returns the smallest integer larger than or equal to x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
		<KeyWord name="math.clamp" func = "yes">
			<Overload retVal= "number: clamped number" descr = "Returns the number clamped between two values">
				<Param name = "number: minimum, number: maximum"/>
            </Overload>
		</KeyWord>
        <KeyWord name="math.cos" func="yes">
            <Overload retVal="void" descr="
Returns the cosine of x (assumed to be in radians). 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.cosh" func="yes">
            <Overload retVal="void" descr="
Returns the hyperbolic cosine of x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.deg" func="yes">
            <Overload retVal="void" descr="
Returns the angle x (given in radians) in degrees. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.exp" func="yes">
            <Overload retVal="void" descr="
Returns the value ex. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.floor" func="yes">
            <Overload retVal="void" descr="
Returns the largest integer smaller than or equal to x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.fmod" func="yes">
            <Overload retVal="void" descr="
Returns the remainder of the division of x by y that rounds the quotient towards zero. 
        ">
                <Param name="x" />
                <Param name="y" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.frexp" func="yes">
            <Overload retVal="void" descr="
Returns m and e such that x = m2e, e is an integer and the absolute value of m is in 
the range [0.5, 1) (or zero when x is zero). 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.huge" func="no" />
        <KeyWord name="math.ldexp" func="yes">
            <Overload retVal="void" descr="
Returns m2e (e should be an integer). 
        ">
                <Param name="m" />
                <Param name="e" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.log" func="yes">
            <Overload retVal="void" descr="
Returns the natural logarithm of x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.log10" func="yes">
            <Overload retVal="void" descr="
Returns the base-10 logarithm of x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.max" func="yes">
            <Overload retVal="void" descr="
Returns the maximum value among its arguments. 
        ">
                <Param name="x" />
                <Param name="..." />
            </Overload>
        </KeyWord>
        <KeyWord name="math.min" func="yes">
            <Overload retVal="void" descr="
Returns the minimum value among its arguments. 
        ">
                <Param name="x" />
                <Param name="..." />
            </Overload>
        </KeyWord>
        <KeyWord name="math.modf" func="yes">
            <Overload retVal="void" descr="
Returns two numbers, the integral part of x and the fractional part of x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.pi" func="no" />
        <KeyWord name="math.pow" func="yes">
            <Overload retVal="void" descr="
Returns xy. (You can also use the expression x^y to compute this value.) 
        ">
                <Param name="x" />
                <Param name="y" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.rad" func="yes">
            <Overload retVal="void" descr="
Returns the angle x (given in degrees) in radians. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.random" func="yes">
            <Overload retVal="void" descr="
This function is an interface to the simple pseudo-random generator function rand 
provided by ANSI C. (No guarantees can be given for its statistical properties.)

When called without arguments, returns a uniform pseudo-random real number in the 
range [0,1). When called with an integer number m, math.random returns a uniform 
pseudo-random integer in the range [1, m]. When called with two integer numbers m and 
n, math.random returns a uniform pseudo-random integer in the range [m, n]. 
        ">
                <Param name="[m [, n]]" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.randomseed" func="yes">
            <Overload retVal="void" descr="
Sets x as the 'seed' for the pseudo-random generator: equal seeds produce equal 
sequences of numbers. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
		<KeyWord name="math.round" func = "yes">
			<Overload retVal= "int: rounded number">
				<Param name = "number: number to round"/>
            </Overload>
		</KeyWord>
        <KeyWord name="math.sin" func="yes">
            <Overload retVal="void" descr="
Returns the sine of x (assumed to be in radians). 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.sinh" func="yes">
            <Overload retVal="void" descr="
Returns the hyperbolic sine of x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.sqrt" func="yes">
            <Overload retVal="void" descr="
Returns the square root of x. (You can also use the expression x^0.5 to compute this value.) 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.tan" func="yes">
            <Overload retVal="void" descr="
Returns the tangent of x (assumed to be in radians). 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="math.tanh" func="yes">
            <Overload retVal="void" descr="
Returns the hyperbolic tangent of x. 
        ">
                <Param name="x" />
            </Overload>
        </KeyWord>
        <KeyWord name="module" func="yes">
            <Overload retVal="void" descr="
Creates a module. If there is a table in package.loaded[name], this table is the module. 
Otherwise, if there is a global table t with the given name, this table is the module. 
Otherwise creates a new table t and sets it as the value of the global name and the value 
of package.loaded[name]. This function also initializes t._NAME with the given name, t._M 
with the module (t itself), and t._PACKAGE with the package name (the full module name 
minus last component; see below). Finally, module sets t as the new environment of the 
current function and the new value of package.loaded[name], so that require returns t.

If name is a compound name (that is, one with components separated by dots), module creates 
(or reuses, if they already exist) tables for each component. For instance, if name is a.b.c, 
then module stores the module table in field c of field b of global a.

This function can receive optional options after the module name, where each option is a 
function to be applied over the module. 
        ">
                <Param name="name" />
                <Param name="[, ···]" />
            </Overload>
        </KeyWord>
		<KeyWord name="Mouse.getTarget" func = "yes">
			<Overload retVal="Tile: target">
            </Overload>
		</KeyWord>
		<KeyWord name="Mouse.getPosition" func = "yes">
			<Overload retVal="Vector: position">
            </Overload>
		</KeyWord>
        <KeyWord name="Mouse.setTexture" func ="yes">
			<Overload retVal="void" descr = "Set the mouse cursor texture">
				<Param name = "Texture: cursor"/>
            </Overload>
		</KeyWord>
        <KeyWord name="next" func="yes">
            <Overload retVal="void" descr="
Allows a program to traverse all fields of a table. Its first argument is a table and its second 
argument is an index in this table. next returns the next index of the table and its associated 
value. When called with nil as its second argument, next returns an initial index and its associated 
value. When called with the last index, or with nil in an empty table, next returns nil. If the 
second argument is absent, then it is interpreted as nil. In particular, you can use next(t) to 
check whether a table is empty.

The order in which the indices are enumerated is not specified, even for numeric indices. (To 
traverse a table in numeric order, use a numerical for or the ipairs function.)

The behavior of next is undefined if, during the traversal, you assign any value to a non-existent 
field in the table. You may however modify existing fields. In particular, you may clear existing 
fields. 
        ">
                <Param name="table" />
                <Param name="[, index]" />
            </Overload>
        </KeyWord>
        <KeyWord name="nil" func="no" />
        <KeyWord name="not" func="no" />
		<KeyWord name="onCheckedChanged" func="yes" >
            <Overload retVal="void" descr = "Called when the checked state is changed">
				<Param name = "bool: newState"/>
            </Overload>
        </KeyWord>
		<KeyWord name="onClosed" func="yes" >
            <Overload retVal="void" descr = "Called when the WindowGUI is closed (GUI is unregistered)"/>
        </KeyWord>
        <KeyWord name="onCommand" func="yes" >
            <Overload retVal="void" descr = "Called when a command key is pressed while a TextBox is focused"/>
        </KeyWord>
		<KeyWord name="onEntered" func="yes" >
            <Overload retVal="void" descr = "Called when the mouse starts hovering the object"/>
        </KeyWord>
		<KeyWord name="onFocused" func="yes" >
            <Overload retVal="void" descr = "Called when the GUI is focused"/>
        </KeyWord>
		<KeyWord name="onLeave" func="yes" >
            <Overload retVal="void" descr = "Called when the mouse stops hovering the object"/>
        </KeyWord>
		<KeyWord name="onReleased" func="yes" >
            <Overload retVal="void" descr = "Called when the mouse stops clicking the object"/>
        </KeyWord>
		<KeyWord name="onMouseMove" func="yes" >
            <Overload retVal="void" descr = "Called when the mouse moves">
				<Param name = "Vector: mouseMove"/>
            </Overload>
        </KeyWord>
		<KeyWord name="onPressed" func="yes" >
            <Overload retVal="void" descr = "Called when the mouse clicks the object"/>
        </KeyWord>
		<KeyWord name="onResize" func="yes" >
            <Overload retVal="void" descr = "Called when the GUI is resized">
				<Param name = "Vector: oldSize"/>
				<Param name = "Vector: newSize"/>
            </Overload>
        </KeyWord>
		<KeyWord name="onSubmitted" func="yes" >
            <Overload retVal="void" descr = "Called when :submit() is called by something (TextBox)"/>
        </KeyWord>
		<KeyWord name="onUnfocused" func="yes" >
            <Overload retVal="void" descr = "Called when the GUI is no longer focused"/>
        </KeyWord>
		<KeyWord name="onValueChanged" func="yes" >
            <Overload retVal="void" descr = "Called when the value (currently only of a slider) is changed">
				<Param name = "number: newValue"/>
            </Overload>
        </KeyWord>
        <KeyWord name="or" func="no" />
        <KeyWord name="os.clock" func="yes">
            <Overload retVal="void" descr="
Returns an approximation of the amount in seconds of CPU time used by the program. 
        "></Overload>
        </KeyWord>
		<KeyWord name="os.close" func="yes">
            <Overload retVal="void" descr="
Closes BlurEngine
        ">
            </Overload>
        </KeyWord>
        <KeyWord name="os.date" func="yes">
            <Overload retVal="void" descr="
Returns a string or a table containing date and time, formatted according to the given string format.

If the time argument is present, this is the time to be formatted (see the os.time function 
for a description of this value). Otherwise, date formats the current time.

If format starts with '!', then the date is formatted in Coordinated Universal Time. After this 
optional character, if format is the string '*t', then date returns a table with the following fields: 
year (four digits), 
month (1--12), 
day (1--31), 
hour (0--23), 
min (0--59), 
sec (0--61), 
wday (weekday, Sunday is 1), 
yday (day of the year), and 
isdst (daylight saving flag, a boolean).

If format is not '*t', then date returns the date as a string, formatted according to the same 
rules as the C function strftime.

When called without arguments, date returns a reasonable date and time representation that 
depends on the host system and on the current locale (that is, os.date() is equivalent to os.date('%c')). 
        ">
                <Param name="[format [, time]]" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.difftime" func="yes">
            <Overload retVal="void" descr="
Returns the number of seconds from time t1 to time t2. In POSIX, Windows, and some other systems, 
this value is exactly t2-t1. 
        ">
                <Param name="t2" />
                <Param name="t1" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.execute" func="yes">
            <Overload retVal="void" descr="
This function is equivalent to the C function system. It passes command to be executed by an operating 
system shell. It returns a status code, which is system-dependent. If command is absent, then it returns 
nonzero if a shell is available and zero otherwise. 
        ">
                <Param name="[command]" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.exit" func="yes">
            <Overload retVal="void" descr="
Calls the C function exit, with an optional code, to terminate the host program. The default 
value for code is the success code. 
        ">
                <Param name="[code]" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.getenv" func="yes">
            <Overload retVal="void" descr="
Returns the value of the process environment variable varname, or nil if the variable is not defined. 
        ">
                <Param name="varname" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.remove" func="yes">
            <Overload retVal="void" descr="
Deletes the file or directory with the given name. Directories must be empty to be removed. If this 
function fails, it returns nil, plus a string describing the error. 
        ">
                <Param name="filename" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.rename" func="yes">
            <Overload retVal="void" descr="
Renames file or directory named oldname to newname. If this function fails, it returns nil, plus a 
string describing the error. 
        ">
                <Param name="oldname" />
                <Param name="newname" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.setlocale" func="yes">
            <Overload retVal="void" descr="
Sets the current locale of the program. locale is a string specifying a locale; category is an optional 
string describing which category to change: 'all', 'collate', 'ctype', 'monetary', 'numeric', or 'time'; 
the default category is 'all'. The function returns the name of the new locale, or nil if the request 
cannot be honored.

If locale is the empty string, the current locale is set to an implementation-defined native locale. If 
locale is the string 'C', the current locale is set to the standard C locale.

When called with nil as the first argument, this function only returns the name of the current locale 
for the given category. 
        ">
                <Param name="locale" />
                <Param name="[, category]" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.time" func="yes">
            <Overload retVal="void" descr="
Returns the current time when called without arguments, or a time representing the date and time specified 
by the given table. This table must have fields year, month, and day, and may have fields hour, min, sec, 
and isdst (for a description of these fields, see the os.date function).

The returned value is a number, whose meaning depends on your system. In POSIX, Windows, and some other 
systems, this number counts the number of seconds since some given start time (the 'epoch'). 
In other systems, the meaning is not specified, and the number returned by time can be used only as an 
argument to date and difftime. 
        ">
                <Param name="[table]" />
            </Overload>
        </KeyWord>
        <KeyWord name="os.tmpname" func="yes">
            <Overload retVal="void" descr="
Returns a string with a file name that can be used for a temporary file. The file must be explicitly 
opened before its use and explicitly removed when no longer needed.

On some systems (POSIX), this function also creates a file with that name, to avoid security risks. 
(Someone else might create the file with wrong permissions in the time between getting the name and 
creating the file.) You still have to open the file to use it and to remove it (even if you do not use it).

When possible, you may prefer to use io.tmpfile, which automatically removes the file when the program ends. 
        "></Overload>
        </KeyWord>
        <KeyWord name="pairs" func="yes">
            <Overload retVal="void" descr="
Returns three values: the next function, the table t, and nil, so that the construction

     for k,v in pairs(t) do body end

will iterate over all key–value pairs of table t.

See function next for the caveats of modifying the table during its traversal. 
        ">
                <Param name="t" />
            </Overload>
        </KeyWord>
        <KeyWord name="pcall" func="yes">
            <Overload retVal="void" descr="
Calls function f with the given arguments in protected mode. This means that any error 
inside f is not propagated; instead, pcall catches the error and returns a status code. 
Its first result is the status code (a boolean), which is true if the call succeeds without 
errors. In such case, pcall also returns all results from the call, after this first result. 
In case of any error, pcall returns false plus the error message. 
        ">
                <Param name="f" />
                <Param name="arg1" />
                <Param name="···" />
            </Overload>
        </KeyWord>
		<KeyWord name="play" func="yes" />
        <KeyWord name="print" func="yes">
            <Overload retVal="void" descr="
Receives any number of arguments, and prints their values to stdout, using the tostring 
function to convert them to strings. print is not intended for formatted output, but only 
as a quick way to show a value, typically for debugging. For formatted output, use string.format. 
        ">
                <Param name="···" />
            </Overload>
        </KeyWord>
        <KeyWord name="rawequal" func="yes">
            <Overload retVal="void" descr="
Checks whether v1 is equal to v2, without invoking any metamethod. Returns a boolean. 
        ">
                <Param name="v1" />
                <Param name="v2" />
            </Overload>
        </KeyWord>
        <KeyWord name="rawget" func="yes">
            <Overload retVal="void" descr="
Gets the real value of table[index], without invoking any metamethod. table must be a 
table; index may be any value. 
        ">
                <Param name="table" />
                <Param name="index" />
            </Overload>
        </KeyWord>
        <KeyWord name="rawset" func="yes">
            <Overload retVal="void" descr="
Sets the real value of table[index] to value, without invoking any metamethod. table must 
be a table, index any value different from nil, and value any Lua value.

This function returns table. 
        ">
                <Param name="table" />
                <Param name="index" />
                <Param name="value" />
            </Overload>
        </KeyWord>
        <KeyWord name="renderTile" func = "yes">
			<Overload retVal = "void" descr="TileRenderer method. Render a tile, without the tile object. Please ensure opacity is a number that is 0-1.">
				<Param name="Texture: texture"/>
				<Param name="Color: color"/>
				<Param name="Vector: position"/>
				<Param name="Vector: size"/>
				<Param name="Vector: textureSize"/>
				<Param name="bool: isTextureTiled"/>
				<Param name="number: opacity"/>
			</Overload>
		</KeyWord>
        <KeyWord name="renderTileRotated" func = "yes">
			<Overload retVal = "void" descr="TileRenderer method. Render a tile just like renderTile but with the ability to specify the rotation about it's center.">
				<Param name="Texture: texture"/>
				<Param name="Color: color"/>
				<Param name="Vector: position"/>
				<Param name="Vector: size"/>
				<Param name="Vector: textureSize"/>
				<Param name="bool: isTextureTiled"/>
				<Param name="number: angleRad"/>
				<Param name="number: opacity"/>
			</Overload>
		</KeyWord>
        <KeyWord name="removeObject" func = "yes"> <!-- DEPRECATED REMOVED -->
			<Overload retVal = "void" descr="GUI method. Remove a GUIObject from a GUI">
				<Param name="GUIObject: object"/>
			</Overload>
		</KeyWord>
        <KeyWord name="repeat" func="no" />
        <KeyWord name="return" func="no" />
        <KeyWord name="select" func="yes">
            <Overload retVal="void" descr="
If index is a number, returns all arguments after argument number index. Otherwise, index 
must be the string '#', and select returns the total number of extra arguments it received. 
        ">
                <Param name="index" />
                <Param name="···" />
            </Overload>
        </KeyWord>
		<KeyWord name="setBackgroundColor" func = "yes">
			<Overload retVal= "void" descr = "Set the background color to a new color value">
				<Param name = "Color: backgroundColor"/>
			</Overload>
		</KeyWord>
        <KeyWord name="setExitVisible" func = "yes">
			<Overload retVal= "void" descr = "WindowGUI function. Changes the visibility of the window's exit button">
				<Param name = "bool: newState"/>
			</Overload>
		</KeyWord>
        <KeyWord name="setfenv" func="yes">
            <Overload retVal="void" descr="
Sets the environment to be used by the given function. f can be a Lua function or a number 
that specifies the function at that stack level: Level 1 is the function calling setfenv. 
setfenv returns the given function.

As a special case, when f is 0 setfenv changes the environment of the running thread. 
In this case, setfenv returns no values. 
        ">
                <Param name="f" />
                <Param name="table" />
            </Overload>
        </KeyWord>
		<KeyWord name="setFont" func ="yes">
			<Overload retVal="void" descr = "GUIObject method. Set the font of a GUIObject which uses text">
				<Param name = "string: fontName"/>
				<Param name = "int: fontSize"/>
            </Overload>
		</KeyWord>
		<KeyWord name="setIcon" func ="yes">
			<Overload retVal="void" descr = "Set the small icon at the top left of the game window">
				<Param name = "string: iconPath"/>
            </Overload>
		</KeyWord>
        <KeyWord name="setmetatable" func="yes">
            <Overload retVal="void" descr="
Sets the metatable for the given table. (You cannot change the metatable of other types 
from Lua, only from C.) If metatable is nil, removes the metatable of the given table. 
If the original metatable has a '__metatable' field, raises an error.

This function returns table. 
        ">
                <Param name="table" />
                <Param name="metatable" />
            </Overload>
        </KeyWord>
		<KeyWord name="setTitle" func ="yes">
			<Overload retVal="void" descr = "Set the title of the game window">
				<Param name = "string: title"/>
            </Overload>
		</KeyWord>
        <KeyWord name="Socket.new" func ="yes">
			<Overload retVal="Socket createdSocket" descr = "Create a new Socket">
            </Overload>
		</KeyWord>
		<KeyWord name="Sound.load" func ="yes">
			<Overload retVal="Sound loadedSound" descr = "Load a sound from path">
				<Param name = "string: path"/>
            </Overload>
		</KeyWord>
		<KeyWord name="stop" func="yes" />
		<KeyWord name="stopAll" func="yes" />
        <KeyWord name="string.byte" func="yes">
            <Overload retVal="void" descr="
Returns the internal numerical codes of the characters s[i], s[i+1], ···, s[j]. The default 
value for i is 1; the default value for j is i.

Note that numerical codes are not necessarily portable across platforms. 
        ">
                <Param name="s [, i [, j]]" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.char" func="yes">
            <Overload retVal="void" descr="
Receives zero or more integers. Returns a string with length equal to the number of arguments, 
in which each character has the internal numerical code equal to its corresponding argument.

Note that numerical codes are not necessarily portable across platforms. 
        ">
                <Param name="···" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.dump" func="yes">
            <Overload retVal="void" descr="
Returns a string containing a binary representation of the given function, so that a later 
loadstring on this string returns a copy of the function. function must be a Lua function 
without upvalues. 
        ">
                <Param name="function" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.find" func="yes">
            <Overload retVal="void" descr="
Looks for the first match of pattern in the string s. If it finds a match, then find returns 
the indices of s where this occurrence starts and ends; otherwise, it returns nil. A third, 
optional numerical argument init specifies where to start the search; its default value is 1 
and can be negative. A value of true as a fourth, optional argument plain turns off the 
pattern matching facilities, so the function does a plain 'find substring' operation, with 
no characters in pattern being considered 'magic'. Note that if plain is given, then init 
must be given as well.

If the pattern has captures, then in a successful match the captured values are also returned, 
after the two indices. 
        ">
                <Param name="s" />
                <Param name="pattern" />
                <Param name="[, init [, plain]]" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.format" func="yes">
            <Overload retVal="void" descr="
Returns a formatted version of its variable number of arguments following the description 
given in its first argument (which must be a string). The format string follows the same 
rules as the printf family of standard C functions. The only differences are that the options/modifiers 
*, l, L, n, p, and h are not supported and that there is an extra option, q. The q option formats 
a string in a form suitable to be safely read back by the Lua interpreter: the string is 
written between double quotes, and all double quotes, newlines, embedded zeros, and backslashes 
in the string are correctly escaped when written. For instance, the call

     string.format('%q', 'a string with ''quotes'' and \n new line')

will produce the string:

     'a string with \''quotes\'' and \
      new line'

The options c, d, E, e, f, g, G, i, o, u, X, and x all expect a number as argument, whereas 
q and s expect a string.

This function does not accept string values containing embedded zeros, except as arguments 
to the q option. 
        ">
                <Param name="formatstring" />
                <Param name="···" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.gmatch" func="yes">
            <Overload retVal="void" descr="
Returns an iterator function that, each time it is called, returns the next captures from 
pattern over string s. If pattern specifies no captures, then the whole match is produced 
in each call.

As an example, the following loop

     s = 'hello world from Lua'
     for w in string.gmatch(s, '%a+') do
       print(w)
     end

will iterate over all the words from string s, printing one per line. The next example collects 
all pairs key=value from the given string into a table:

     t = {}
     s = 'from=world, to=Lua'
     for k, v in string.gmatch(s, '(%w+)=(%w+)') do
       t[k] = v
     end

For this function, a '^' at the start of a pattern does not work as an anchor, as this would 
prevent the iteration. 
        ">
                <Param name="s" />
                <Param name="pattern" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.gsub" func="yes">
            <Overload retVal="void" descr="
Returns a copy of s in which all (or the first n, if given) occurrences of the pattern have 
been replaced by a replacement string specified by repl, which can be a string, a table, or 
a function. gsub also returns, as its second value, the total number of matches that occurred.

Look at the online documentation for this function.
">
                <Param name="s" />
                <Param name="pattern" />
                <Param name="repl" />
                <Param name="[, n]" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.len" func="yes">
            <Overload retVal="void" descr="
Receives a string and returns its length. The empty string '' has length 0. Embedded zeros are 
counted, so 'a\000bc\000' has length 5. 
        ">
                <Param name="s" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.lower" func="yes">
            <Overload retVal="void" descr="
Receives a string and returns a copy of this string with all uppercase letters changed to 
lowercase. All other characters are left unchanged. The definition of what an uppercase 
letter is depends on the current locale. 
        ">
                <Param name="s" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.match" func="yes">
            <Overload retVal="void" descr="
Looks for the first match of pattern in the string s. If it finds one, then match returns the 
captures from the pattern; otherwise it returns nil. If pattern specifies no captures, then 
the whole match is returned. A third, optional numerical argument init specifies where to 
start the search; its default value is 1 and can be negative. 
        ">
                <Param name="s" />
                <Param name="pattern" />
                <Param name="[, init]" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.rep" func="yes">
            <Overload retVal="void" descr="
Returns a string that is the concatenation of n copies of the string s. 
        ">
                <Param name="s" />
                <Param name="n" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.reverse" func="yes">
            <Overload retVal="void" descr="
Returns a string that is the string s reversed. 
        ">
                <Param name="s" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.sub" func="yes">
            <Overload retVal="void" descr="
Returns the substring of s that starts at i and continues until j; i and j can be negative. 
If j is absent, then it is assumed to be equal to -1 (which is the same as the string length). 
In particular, the call string.sub(s,1,j) returns a prefix of s with length j, and string.sub(s, -i) 
returns a suffix of s with length i. 
        ">
                <Param name="s" />
                <Param name="i" />
                <Param name="[, j]" />
            </Overload>
        </KeyWord>
        <KeyWord name="string.upper" func="yes">
            <Overload retVal="void" descr="
Receives a string and returns a copy of this string with all lowercase letters changed to 
uppercase. All other characters are left unchanged. The definition of what a lowercase letter 
is depends on the current locale. 
        ">
                <Param name="s" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.concat" func="yes">
            <Overload retVal="void" descr="
Given an array where all elements are strings or numbers, returns table[i]..sep..table[i+1] ··· sep..table[j]. 
The default value for sep is the empty string, the default for i is 1, and the default for j is the length 
of the table. If i is greater than j, returns the empty string. 
        ">
                <Param name="table" />
                <Param name="[, sep [, i [, j]]]" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.insert" func="yes">
            <Overload retVal="void" descr="
Inserts element value at position pos in table, shifting up other elements to open space, 
if necessary. The default value for pos is n+1, where n is the length of the table (see §2.5.5), 
so that a call table.insert(t,x) inserts x at the end of table t. 
        ">
                <Param name="table" />
                <Param name="[pos,]" />
                <Param name="value" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.maxn" func="yes">
            <Overload retVal="void" descr="
Returns the largest positive numerical index of the given table, or zero if the table has no 
positive numerical indices. (To do its job this function does a linear traversal of the whole table.) 
        ">
                <Param name="table" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.remove" func="yes">
            <Overload retVal="void" descr="
Removes from table the element at position pos, shifting down other elements to close the space, 
if necessary. Returns the value of the removed element. The default value for pos is n, where n 
is the length of the table, so that a call table.remove(t) removes the last element of table t. 
        ">
                <Param name="table" />
                <Param name="[, pos]" />
            </Overload>
        </KeyWord>
        <KeyWord name="table.sort" func="yes">
            <Overload retVal="void" descr="
Sorts table elements in a given order, in-place, from table[1] to table[n], where n is the length 
of the table. If comp is given, then it must be a function that receives two table elements, and 
returns true when the first is less than the second (so that not comp(a[i+1],a[i]) will be true 
after the sort). If comp is not given, then the standard Lua operator lessthan is used instead.

The sort algorithm is not stable; that is, elements considered equal by the given order may have 
their relative positions changed by the sort. 
        ">
                <Param name="table" />
                <Param name="[, comp]" />
            </Overload>
        </KeyWord>
		<KeyWord name="Texture.load" func="yes">
			<Overload retVal="Texture: loadedTexture">
				<Param name="String: path"/>
            </Overload>
		</KeyWord>
		<KeyWord name="Tile.new" func="yes">
			<Overload retVal="void">
				<Param name="Vector: position"/> 
				<Param name="Texture: texture"/>
            </Overload>
		</KeyWord>
		<KeyWord name="Tile.remove" func = "yes">
			<Overload retVal="void">
				<Param name = "Tile: tile to remove"/>
            </Overload>
		</KeyWord>
        <KeyWord name="then" func="no" />
        <KeyWord name="tonumber" func="yes">
            <Overload retVal="void" descr="
Tries to convert its argument to a number. If the argument is already a number or a string 
convertible to a number, then tonumber returns this number; otherwise, it returns nil.

An optional argument specifies the base to interpret the numeral. The base may be any integer 
between 2 and 36, inclusive. In bases above 10, the letter 'A' (in either upper or lower case) 
represents 10, 'B' represents 11, and so forth, with 'Z' representing 35. In base 10 (the default), 
the number can have a decimal part, as well as an optional exponent part (see §2.1). In other 
bases, only unsigned integers are accepted. 
        ">
                <Param name="e" />
                <Param name="[, base]" />
            </Overload>
        </KeyWord>
        <KeyWord name="tostring" func="yes">
            <Overload retVal="void" descr="
Receives an argument of any type and converts it to a string in a reasonable format. For complete 
control of how numbers are converted, use string.format.

If the metatable of e has a '__tostring' field, then tostring calls the corresponding value with 
e as argument, and uses the result of the call as its result. 
        ">
                <Param name="e" />
            </Overload>
        </KeyWord>
        <KeyWord name="toScreenVector" func = "yes">
			<Overload retVal="Vector: converted position" descr = "Converts the input world position into a screen point">
				<Param name = "Vector: world coordinate"/>
            </Overload>
		</KeyWord>
		<KeyWord name="toWorldVector" func = "yes">
			<Overload retVal="Vector: converted position" descr = "Converts the input screen point into a world position">
				<Param name = "Vector: screen coordinate"/>
            </Overload>
		</KeyWord>
        <KeyWord name="true" func="no" />
        <KeyWord name="type" func="yes">
            <Overload retVal="void" descr="
Returns the type of its only argument, coded as a string. The possible results of this function 
are 'nil' (a string, not the value nil), 'number', 'string', 'boolean', 'table', 'function', 'thread', and 'userdata'. 
        ">
                <Param name="v" />
            </Overload>
        </KeyWord>
        <KeyWord name="unpack" func="yes">
            <Overload retVal="void" descr="
Returns the elements from the given table. This function is equivalent to

     return list[i], list[i+1], ···, list[j]

except that the above code can be written only for a fixed number of elements. By default, i is 1 and 
j is the length of the list, as defined by the length operator (see §2.5.5). 
        ">
                <Param name="list" />
                <Param name="[, i [, j]]" />
            </Overload>
        </KeyWord>
        <KeyWord name="until" func="no" />
		<KeyWord name="Vector" func="yes">
			<Overload retVal="Vector: vector" descr="Create a new Vector from a set of coordinates">
				<Param name= "float: x"/>
				<Param name= "float: y"/>
				<Param name= "?float: z"/>
			</Overload>
		</KeyWord>
		<KeyWord name="while" func="no" />
        <KeyWord name="xpcall" func="yes">
            <Overload retVal="void" descr="
This function is similar to pcall, except that you can set a new error handler.

xpcall calls function f in protected mode, using err as the error handler. Any error inside f is 
not propagated; instead, xpcall catches the error, calls the err function with the original error 
object, and returns a status code. Its first result is the status code (a boolean), which is true 
if the call succeeds without errors. In this case, xpcall also returns all results from the call, 
after this first result. In case of any error, xpcall returns false plus the result from err. 
        ">
                <Param name="f" />
                <Param name="err" />
            </Overload>
        </KeyWord>
		<!-- Texture modes -->
		<KeyWord name="TEXTUREMODE_STRETCH"/>
		<KeyWord name="TEXTUREMODE_TILE"/>
		<!-- Alignment types-->
		<KeyWord name="ALIGN_LEFT"/>
		<KeyWord name="ALIGN_CENTER"/>
		<KeyWord name="ALIGN_RIGHT"/>
		<KeyWord name="ALIGN_TOP"/>
		<KeyWord name="ALIGN_BOTTOM"/>
		<!-- Button actions -->
		<KeyWord name="BUTTON_PRESS"/>
		<KeyWord name="BUTTON_RELEASE"/>
		<KeyWord name="BUTTON_REPEAT"/>
        <!--- Modifiers -->
        <KeyWord name="MOD_SHIFT"/>
        <KeyWord name="MOD_CONTROL"/>
        <KeyWord name="MOD_ALT"/>
        <KeyWord name="MOD_SUPER"/>
        <KeyWord name="MOD_CAPS_LOCK"/>
        <KeyWord name="MOD_NUM_LOCK"/>
		<!-- BLF types -->
		<KeyWord name="BLF_BOOL"/>
		<KeyWord name="BLF_FLOAT"/>
		<KeyWord name="BLF_INT"/>
		<KeyWord name="BLF_STRING"/>
		<KeyWord name="BLF_ACCESSPROPERTY"/>
		<!-- Mouse buttons -->
		<KeyWord name="MOUSE_BUTTON_1"/>
		<KeyWord name="MOUSE_BUTTON_2"/>
		<KeyWord name="MOUSE_BUTTON_3"/>
		<KeyWord name="MOUSE_BUTTON_4"/>
		<KeyWord name="MOUSE_BUTTON_5"/>
		<KeyWord name="MOUSE_BUTTON_6"/>
		<KeyWord name="MOUSE_BUTTON_7"/>
		<KeyWord name="MOUSE_BUTTON_8"/>
		<!-- Letters -->
		<KeyWord name="KEY_A"/>
		<KeyWord name="KEY_B"/>
		<KeyWord name="KEY_C"/>
		<KeyWord name="KEY_D"/>
		<KeyWord name="KEY_E"/>
		<KeyWord name="KEY_F"/>
		<KeyWord name="KEY_G"/>
		<KeyWord name="KEY_H"/>
		<KeyWord name="KEY_I"/>
		<KeyWord name="KEY_J"/>
		<KeyWord name="KEY_K"/>
		<KeyWord name="KEY_L"/>
		<KeyWord name="KEY_M"/>
		<KeyWord name="KEY_N"/>
		<KeyWord name="KEY_O"/>
		<KeyWord name="KEY_P"/>
		<KeyWord name="KEY_Q"/>
		<KeyWord name="KEY_R"/>
		<KeyWord name="KEY_S"/>
		<KeyWord name="KEY_T"/>
		<KeyWord name="KEY_U"/>
		<KeyWord name="KEY_V"/>
		<KeyWord name="KEY_W"/>
		<KeyWord name="KEY_X"/>
		<KeyWord name="KEY_Y"/>
		<KeyWord name="KEY_Z"/>
		<!-- Digits -->
		<KeyWord name="KEY_0"/>
		<KeyWord name="KEY_1"/>
		<KeyWord name="KEY_2"/>
		<KeyWord name="KEY_3"/>
		<KeyWord name="KEY_4"/>
		<KeyWord name="KEY_5"/>
		<KeyWord name="KEY_6"/>
		<KeyWord name="KEY_7"/>
		<KeyWord name="KEY_8"/>
		<KeyWord name="KEY_9"/>
		<!-- Special -->
        <KeyWord name="KEY_SPACE"/>
        <KeyWord name="KEY_APOSTROPHE"/>
        <KeyWord name="KEY_COMMA"/>
        <KeyWord name="KEY_MINUS"/>
        <KeyWord name="KEY_PERIOD"/>
        <KeyWord name="KEY_SLASH"/>
        <KeyWord name="KEY_SEMICOLON"/>
        <KeyWord name="KEY_EQUAL"/>
        <KeyWord name="KEY_LEFT_BRACKET"/>
        <KeyWord name="KEY_BACKSLASH"/>
        <KeyWord name="KEY_RIGHT_BRACKET"/>
        <KeyWord name="KEY_GRAVE_ACCENT"/>
        <KeyWord name="KEY_WORLD_1"/>
        <KeyWord name="KEY_WORLD_2"/>
        <KeyWord name="KEY_ESCAPE"/>
        <KeyWord name="KEY_ENTER"/>
        <KeyWord name="KEY_TAB"/>
        <KeyWord name="KEY_BACKSPACE"/>
        <KeyWord name="KEY_INSERT"/>
        <KeyWord name="KEY_DELETE"/>
        <KeyWord name="KEY_RIGHT"/>
        <KeyWord name="KEY_LEFT"/>
        <KeyWord name="KEY_DOWN"/>
        <KeyWord name="KEY_UP"/>
        <KeyWord name="KEY_PAGE_UP"/>
        <KeyWord name="KEY_PAGE_DOWN"/>
        <KeyWord name="KEY_HOME"/>
        <KeyWord name="KEY_END"/>
        <KeyWord name="KEY_CAPS_LOCK"/>
        <KeyWord name="KEY_SCROLL_LOCK"/>
        <KeyWord name="KEY_NUM_LOCK"/>
        <KeyWord name="KEY_PRINT_SCREEN"/>
        <KeyWord name="KEY_PAUSE"/>
        <KeyWord name="KEY_F1"/>
        <KeyWord name="KEY_F2"/>
        <KeyWord name="KEY_F3"/>
        <KeyWord name="KEY_F4"/>
        <KeyWord name="KEY_F5"/>
        <KeyWord name="KEY_F6"/>
        <KeyWord name="KEY_F7"/>
        <KeyWord name="KEY_F8"/>
        <KeyWord name="KEY_F9"/>
        <KeyWord name="KEY_F10"/>
        <KeyWord name="KEY_F11"/>
        <KeyWord name="KEY_F12"/>
        <KeyWord name="KEY_F13"/>
        <KeyWord name="KEY_F14"/>
        <KeyWord name="KEY_F15"/>
        <KeyWord name="KEY_F16"/>
        <KeyWord name="KEY_F17"/>
        <KeyWord name="KEY_F18"/>
        <KeyWord name="KEY_F19"/>
        <KeyWord name="KEY_F20"/>
        <KeyWord name="KEY_F21"/>
        <KeyWord name="KEY_F22"/>
        <KeyWord name="KEY_F23"/>
        <KeyWord name="KEY_F24"/>
        <KeyWord name="KEY_F25"/>
        <KeyWord name="KEY_KP_0"/>
        <KeyWord name="KEY_KP_1"/>
        <KeyWord name="KEY_KP_2"/>
        <KeyWord name="KEY_KP_3"/>
        <KeyWord name="KEY_KP_4"/>
        <KeyWord name="KEY_KP_5"/>
        <KeyWord name="KEY_KP_6"/>
        <KeyWord name="KEY_KP_7"/>
        <KeyWord name="KEY_KP_8"/>
        <KeyWord name="KEY_KP_9"/>
        <KeyWord name="KEY_KP_DECIMAL"/>
        <KeyWord name="KEY_KP_DIVIDE"/>
        <KeyWord name="KEY_KP_MULTIPLY"/>
        <KeyWord name="KEY_KP_SUBTRACT"/>
        <KeyWord name="KEY_KP_ADD"/>
        <KeyWord name="KEY_KP_ENTER"/>
        <KeyWord name="KEY_KP_EQUAL"/>
        <KeyWord name="KEY_LEFT_SHIFT"/>
        <KeyWord name="KEY_LEFT_CONTROL"/>
        <KeyWord name="KEY_LEFT_ALT"/>
        <KeyWord name="KEY_LEFT_SUPER"/>
        <KeyWord name="KEY_RIGHT_SHIFT"/>
        <KeyWord name="KEY_RIGHT_CONTROL"/>
        <KeyWord name="KEY_RIGHT_ALT"/>
        <KeyWord name="KEY_RIGHT_SUPER"/>
        <KeyWord name="KEY_MENU"/>
        <!--- LOG -->
        <KeyWord name="LOG_ERROR"/>
        <KeyWord name="LOG_FATAL"/>
        <KeyWord name="LOG_VERBOSE"/>
        <KeyWord name="LOG_INFO"/>
        <KeyWord name="LOG_WARNING"/>
    </AutoComplete>
</NotepadPlus>